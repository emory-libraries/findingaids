# mock objects for use in tests

from urllib2 import HTTPError

from findingaids.fa_admin import utils

class MockDjangoPidmanClient(utils.DjangoPidmanRestClient):
    '''Mock pidman client - used to simulate generating ARKs and possible
    errors that could occur when attempting to generate ARKs.

    Extends actual pidman rest client to test django-config init handling.

    Minimal object mock, only mocks functions currently used in the site.
    '''

    test_ark = 'http://pid.emory.edu/ark:/78912/cc'
    # use these as static variables on the class (not instance) to inspect calls
    domain = None
    url = None
    name = None
    # set this to a tuple of code, detail to mock an error on the next call only
    # e.g., MockDjangoPidmanClient.raise_error = (401, unauthorized)
    raise_error = None

    search_result_nomatches = {
        'results_count': 0,
        'results': []
    }
    search_result = search_result_nomatches
    search_args = {}

    def _raise_error(self):
        # if an error has been set, get the values, blank it out, then raise it
        if MockDjangoPidmanClient.raise_error is not None:
            code, detail = self.raise_error
            MockDjangoPidmanClient.raise_error = None
            # this is the exception generated by the pidman client code
            raise HTTPError(MockDjangoPidmanClient.url, code, detail, None, None)

    def create_ark(self, domain, url, name=None):
        # minimal mock - only supporting variables in use
        MockDjangoPidmanClient.domain = domain
        MockDjangoPidmanClient.url = url
        MockDjangoPidmanClient.name = name
        self._raise_error()
        return self.test_ark

    def search_pids(self, **kwargs):
        MockDjangoPidmanClient.search_args = kwargs
        self._raise_error()
        return MockDjangoPidmanClient.search_result


# mock http objects that mimic httplib to the extent it is used in reload_cached_pdf
# used to avoid making any real http calls, allow for inspection, setting error codes, etc.

class MockHttpResponse():
    status = 200

class MockHttpConnection():
    response = MockHttpResponse()
    def request(self, method, url):
        self.method = method
        self.url = url
    def getresponse(self):
        return self.response

class MockHttplib:
    connection = MockHttpConnection()
    def HTTPConnection(self, url):
        self.url = url
        return self.connection
