<project name="Illustrated London News Data Preparation" default="all" basedir=".">

<target name="all" depends="unicode-entities,add-extent,figure,xml-parse,tamino-load" description="* Do everything"/>

<!-- clean is not called by anything else; optional task -->
<target name="clean" depends="config" 
	description="* Clean up; delete directories created by build script (optional)" >
  <delete dir="${config.dir.xml}"/>
  <delete dir="${config.dir.cvs}"/>
</target>

<target name="help" depends="" description="* Usage instructions">
<echo>How to use this build script:
  'ant -projecthelp'  display available targets with brief descriptions 
  'ant'               run the default target (in this case, all)
  'ant [target]'      run only the specified task

This build uses an xml config file (build-config.xml).  You should
edit that file to specify your input file &#x0026; the ILN volume number,
as well as your chaucer user id (for cvs access).
</echo>
<!-- insert more instructions here -->
</target>

<target name="config">
  <echo message="Loading configuration settings from config file."/>
  <echo message="************************************************"/>

  <!-- import settings from config file -->
  <xmlproperty file="build-config.xml"/>

<!-- user-readable printout of settings loaded from config file -->

  <echo message="Using the following input file:"/>
  <echo message="   file         : ${config.input.file}"/>
  <echo message="   volume       : ${config.input.volume}"/>
  <echo message="Resulting xml files will be added to cvs with named tag ${config.cvs.tag}"/>
  <echo message="Using the following settings for loading &amp; deleting data on tamino:"/>
  <echo message="   server       : ${config.tamino.server}"/>
  <echo message="   database     : ${config.tamino.database}"/>
  <echo message="   collection   : ${config.tamino.collection}"/>
  <echo message="   root element : ${config.tamino.rootElement}"/>

<!--   <echo message="Internal directories used by build:"/>
  <echo message="   image dir    : ${config.dir.images}"/>
  <echo message="   image thumbs : ${config.dir.images.thumbnails}"/> -->

<!-- check things out from cvs? julia's common framework, neh xml dir -->


  <!-- input filename, without path -->
  <basename property="_inputfile" file="${config.input.file}"/>

  <!-- construct iln cvsroot based on user id -->
  <property name="cvsroot" value=":${config.cvs.cvsroot.type}:${config.cvs.user}@${config.cvs.cvsroot.host}:${config.cvs.cvsroot.path}"/>



<!-- set some properties according to whether directories have been created yet -->
  <available file="${config.dir.xml}" type="dir" property="dir.xml.exists"/>
  <available file="${config.dir.xml.data}" type="dir" property="dir.xml.data.exists"/>
  <available file="${config.dir.xml.entities}" type="dir" property="dir.xml.entities.exists"/>
  <available file="${config.dir.xml.figures}" type="dir" property="dir.xml.figureEntities.exists"/>
  <available file="${config.dir.xml.imgsize}" type="dir" property="dir.xml.imgsize"/>
  <available file="${config.dir.xml.divsize}" type="dir" property="dir.xml.divsize"/>
  <available file="${config.dir.xml.doctype}" type="dir" property="dir.xml.doctype"/>
  <available file="${config.dir.xml.tamino}" type="dir" property="dir.xml.tamino"/>


    <!-- access to environment variables -->
    <property environment="env"/> 
    <path id="base.path">
      <pathelement path="${env.CLASSPATH}"/>
    </path>
    <property name="env.PERL_INCS" value="${basedir}"/> 

<!-- copied from neh build  ... needed?
  <xmlcatalog id="tei"> 
    <dtd publicId="-//TEI//DTD TEI Lite XML ver. 1//EN"  
 	location="${config.dir.cvs.dtd}/${config.dtd}"/>  
    <entity publicId="figure-entities" location="${basedir}/${config.figure.entities}"/> 
  </xmlcatalog>
-->


 
</target> <!-- end target config -->


<!-- check files needed for built out of cvs -->
<target name="cvs" depends="config">

<!-- Note: if we don't delete the dir, then cvs will do an update -->
<!-- instead of a full check out.  (Faster, safer...) -->
<!--  <delete dir="${config.dir.cvs}"/> -->
  <mkdir dir="${config.dir.cvs}"/> 

  <!-- make sure we are logged into main cvs  -->
  <cvspass cvsroot="${cvsroot}" 
	password="${config.cvs.password}"/> 

  <!-- make sure we are logged into common framework cvs as anonymous -->
  <cvspass cvsroot="${config.cvs.cvsroot.frameworkCommon}" 
	password="${config.cvs.password.frameworkCommon}"/>


<!-- NOTE: using -d to specify output directory & let cvs do directory
     truncation; using ant 'dest' attribute so all cvs dirs will be under
     specified cvs directory. -->

  <!-- check out dataPrep directory of common framework on cvs.library -->
  <!-- using -d switch to put all files in cvs/dataPrep dir -->  
  <cvs command="checkout -kb -d ${config.dir.cvs.dataPrep.co}"
       package="frameworkCommon/dataPrep"
       quiet="true"
       cvsRoot="${config.cvs.cvsroot.frameworkCommon}"
       dest="${config.dir.cvs}"
  />

  <!-- check out iln dataPrep directory on chaucer -->
  <cvs command="checkout -kb -d ${config.dir.cvs.iln.co}"
       package="iln/build/dataPrep"
       quiet="false"
       cvsRoot="${cvsroot}"
       dest="${config.dir.cvs}"
  />


  <!-- check out customized dtd to validate against -->
  <cvs command="checkout -kb -d ${config.dir.cvs.iln.dtd.co}"
       package="iln/build/dataPrep/DTD/${config.dtd}"
       quiet="false"
       cvsRoot="${cvsroot}"
       dest="${config.dir.cvs}"
  />


</target>




<target name="init">
<!-- FIXME: parameter setup is now done in target config -->
<!--      <splash/> -->

    <echo message="Defining parameters."/>
    <echo message="**********************************************"/>
    <!-- Set a default input file; this should be specified when ant
	 is called -->
    <property name="inputfile" value="${basedir}/../xml/ilnv39.xml"/>
    <property name="vol" value="39"/>
    <echo>Input file is ${inputfile}
ILN volume is ${vol}</echo>
     
   <!-- actual input filename (without path) -->
    <basename property="_inputfile" file="${inputfile}"/>

    <property name="dataPrepdir"     value="${basedir}/dataPrep"/>
    <property name="xmldir"     value="${basedir}/xml"/>
    <property name="xmldir.data" value="${basedir}/xml/data"/>
    <property name="xmldir.entities" value="${basedir}/xml/entities"/>
    <property name="xmldir.fig_entities"     value="${basedir}/xml/fig_entities"/>
    <property name="xmldir.imgsize" value="${basedir}/xml/imgsize"/>
    <property name="xmldir.divsize"     value="${basedir}/xml/divsize"/>
    <property name="xmldir.doctype"     value="${basedir}/xml/doctype"/>
    <property name="xmldir.tamino" value="${basedir}/xml/tamino"/>
    <property name="add_doctype.sh"     value="${dataPrepdir}/add_doctype.sh"/>
    <property environment="env"/> <!-- provides access to environment var -->
    <path id="base.path">
      <pathelement path="${env.CLASSPATH}"/>
    </path>
    <property name="env.PERL_INCS" value="${basedir}"/> 

<!-- FIXME: this part is not completed/used yet -->
    <available file="${xmldir}" type="dir" property="xmldir.present"/>
    <available file="${xmldir.data}" type="dir" property="xmldir.data.present"/>
    <available file="${xmldir.entities}" type="dir" property="xmldir.entities.present"/>
    <available file="${xmldir.doctype}" type="dir" property="xmldir.doctype.present"/>

</target>


<!-- copy data into starting location -->
<target name="xmldata" depends="config,cvs">

  <echo message="Copying inputfile to workarea."/>
  <echo message="**********************************************"/>

  <delete dir="${config.dir.xml}"/>
  <mkdir dir="${config.dir.xml}"/>
  <mkdir dir="${config.dir.xml.data}"/>

  <copy todir="${config.dir.xml.data}" file="${config.input.file}"/>

</target> <!-- end xmldata -->

<target name="unicode-entities" depends="config,cvs,xmldata" description="* Convert entities to unicode entities ">

 <echo message="Converting sgml entities to unicode entities."/>
 <echo message="**********************************************"/>

<delete dir="${config.dir.xml.entities}"/>
<mkdir dir="${config.dir.xml.entities}"/>

<exec executable="perl" dir="${config.dir.cvs.dataPrep}" failonerror="true">
<arg line="convertEntities2Unicode_controller.pl -i ${basedir}/${config.dir.xml.data} -o ${basedir}/${config.dir.xml.entities} -norename"/>
</exec>

<!-- copy latest version of files into main xml directory -->
<copy todir="${config.dir.xml}">
  <fileset dir="${config.dir.xml.entities}" includes="*.xml"/>
</copy>

</target> <!-- end unicode-entities -->


<target name="ask-extent" depends="config" if="dir.xml.exists">

 <input
    message="Calculate extents &amp; add to the text? "
    validargs="y,n"
    addproperty="extent-response"
  />
  <condition property="do.extent">
    <equals casesensitive="false" arg1="y" arg2="${extent-response}"/>
  </condition>

</target> <!-- ask-extent -->

<target name="add-extent" depends="config,cvs,ask-extent" if="do.extent">

  <echo message="Calculating and adding article extents."/>
  <echo message="**********************************************"/>

  <delete dir="${config.dir.xml.divsize}"/>
  <mkdir dir="${config.dir.xml.divsize}"/>

  <exec executable="perl" dir="${config.dir.cvs.iln}" failonerror="true">
    <arg line="iln_utility.pl -divsize -f ${basedir}/${config.dir.xml}/${_inputfile} -o ${basedir}/${config.dir.xml.divsize}/${_inputfile}"/>
  </exec>

<!-- copy updated version of file back to xmldir -->
  <copy todir="${config.dir.xml}" file="${config.dir.xml.divsize}/${_inputfile}"/>

</target>


<target name="figure" depends="config,cvs,figure-entity,figure-check,imgsize"
  if="dir.xml.exists"
  description="* Add figure entity tags (optional) &amp; image dimensions, check entities" />

<target name="figure-check" depends="config,cvs"  if="dir.xml.exists">
  <exec executable="perl" dir="${config.dir.cvs.iln}" failonerror="true">
   <arg line="iln_utility.pl -entity-check -f ${basedir}/${config.dir.xml}/${_inputfile} -v ${config.input.volume}"/>
  </exec>
</target> <!-- figure-check -->

<target name="figure-entity" depends="config,cvs,ask-figure-entity" if="do.figure-entity">

  <delete dir="${config.dir.xml.figureEntities}"/>
  <mkdir dir="${config.dir.xml.figureEntities}"/>

  <exec executable="perl" dir="${config.dir.cvs.iln}" failonerror="true">
    <arg line="iln_utility.pl -entity-name -f ${basedir}/${config.dir.xml}/${_inputfile} -v ${config.input.volume} -o ${basedir}/${config.dir.xml.figureEntities}/${_inputfile}"/>
  </exec>

<!-- copy updated version of file back to xmldir -->
  <copy todir="${config.dir.xml}" file="${config.dir.xml.figureEntities}/${_inputfile}"/>

</target> <!-- figure-entity -->


<target name="ask-figure-entity" depends="config,cvs">
<!-- ask the user whether or not to input figure entity names -->
 <input
    message="Insert figure entity names into the text? "
    validargs="y,n"
    addproperty="figure-response"
  />
  <condition property="do.figure-entity">
    <equals casesensitive="false" arg1="y" arg2="${figure-response}"/>
  </condition>
</target> <!-- end ask-figure-entity -->

<!-- calculate image width/height from jpeg files, store as figure
attribures -->
<target name="imgsize" depends="config,cvs,figure-check"
if="dir.xml.exists">

  <echo message="Adding figure image dimensions."/>
  <echo message="**********************************************"/>

  <delete dir="${config.dir.xml.imgsize}"/>
  <mkdir dir="${config.dir.xml.imgsize}"/>

  <exec executable="perl" dir="${config.dir.cvs.iln}" failonerror="true">
<arg line="iln_utility.pl -imgsize -f ${basedir}/${config.dir.xml}/${_inputfile} -v ${config.input.volume} -o ${basedir}/${config.dir.xml.imgsize}/${_inputfile}"/>
</exec>

  <!-- copy updated version of file back to xmldir -->
  <copy todir="${config.dir.xml}" file="${config.dir.xml.imgsize}/${_inputfile}"/>

</target> <!-- imgsize -->



<!-- only run xml-parse if the xml directory exists -->
<target name="xml-parse" depends="config,cvs" if="dir.xml.exists"
 	description="* Parse xml files.">

 <echo message="Parsing xml files."/>
 <echo message="**********************************************"/>

 <delete dir="${config.dir.xml.doctype}"/>
 <mkdir dir="${config.dir.xml.doctype}"/>

 <!-- create doctype file -->
 <property name="doctype" value="${config.dir.xml.doctype}/doctype"/>

 <!-- output doctype to a file so we can insert in the xml files -->
 <concat destfile="${doctype}" append="no"><![CDATA[<!DOCTYPE TEI.2 PUBLIC
	"-//TEI//DTD TEI Lite XML ver. 1//EN" 
	"${config.dir.cvs.iln.dtd}/${config.dtd}" [
        <!NOTATION JPEG PUBLIC 'ISO DIS 10918//NOTATION JPEG Graphics Format//EN'>
 	<!ENTITY % iln SYSTEM "${basedir}/${config.dir.cvs.iln}/iln_entities" >
         %iln; ] >]]></concat>
<!-- Note: iln_entities is the list of figure entities and
     corresponding jpeg filenames. -->

  <copy todir="${config.dir.xml.doctype}">
    <fileset dir="${config.dir.xml}" includes="*.xml"/>
  </copy>

  <apply executable="tcsh" parallel="false" failonerror="true">
    <arg line="${config.dir.cvs.iln}/add_doctype.sh ${doctype}"/>
    <fileset dir="${config.dir.xml.doctype}">
      <include name="*.xml"/>
    </fileset>
  </apply>

  <xmlvalidate  lenient="false" failonerror="true" warn="true" 
	classname="org.apache.xerces.parsers.SAXParser">
   <fileset dir="${config.dir.xml.doctype}" includes="*.xml"/>
    <dtd publicId="-//TEI//DTD TEI Lite XML ver. 1//EN" 
	location="${config.dir.cvs.iln.dtd}/${config.dtd}"/>
  </xmlvalidate>

 <!-- If we get to this point, it worked. --> 
 <echo message="Successfully parsed all xml files."/>

<!-- delete temporary files, directory? -->

</target> <!-- end xml-parse -->

<!-- deleted old tamino load... add newer version -->


<target name="ask-load" depends="config" if="dir.xml.exists">
  <input
      message="Would you like to load files to tamino?"
      validargs="y,n"
      addproperty="load-response"
  />
  <condition property="do.load">
    <equals casesensitive="false" arg1="y" arg2="${load-response}"/>
  </condition>
</target> <!--Ask load-->

<target name="tamino-load" depends="ask-load" if="do.load" description="* Load file(s) to tamino" >
 <echo message="Loading file to Tamino."/>
 <echo message="**********************************************"/>

  <exec executable="perl" failonerror="true" dir="${config.dir.cvs.dataPrep}">
    <env key="CLASSPATH" value="${env.CLASSPATH}"/>
    <arg line="tamino-load.pl -d ${config.tamino.database} -c ${config.tamino.collection} -r ${config.tamino.rootElement} ${basedir}/${config.dir.xml}/${_inputfile}"/>
</exec>
</target>


</project>
